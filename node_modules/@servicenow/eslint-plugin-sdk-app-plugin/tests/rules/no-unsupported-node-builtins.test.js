const { RuleTester } = require('eslint');
const noUnsupportedNodeBuiltins = require('../../lib/rules/no-unsupported-node-builtins');
const { getCoreNodeModules, getNodeGlobals } = require('../../lib/util/utility');

const ruleTester = new RuleTester({
    parserOptions: { sourceType: 'module' },
    env: {node: true, es6: true}
});

const getInvalidsForNoUnsupportedNodeBuiltsRule = () => {
    const invalids = []
    const nodeModules = getCoreNodeModules()
    const nodeGlobals = getNodeGlobals()

    for(const module of nodeModules) {
        invalids.push({
            code: `const ${module} = require('${module}')`,
            errors: [{ message: `The ${module} Node.js API is not supported in now platform.` }]
        })
    }

    for(const module of nodeModules) {
        invalids.push({
            code: `import ${module} from '${module}'`,
            errors: [{ message: `The ${module} Node.js API is not supported in now platform.` }]
        })
    }

    for(const global of nodeGlobals) {
        invalids.push({
            code: `const x = ${global}`,
            errors: [{ message: `The ${global} Node.js API is not supported in now platform.` }]
        })
    }

    return invalids
}

ruleTester.run(
    'no-unsupported-node-builtins',
    noUnsupportedNodeBuiltins,
    {
        valid: [{
            code: "const fs = {'Dir':'cool'}; const x = fs.Dir",
        },{
            code: "const fs = {readFileSync: function(){}}; fs.readFileSync()"
        },{
            code: "const Buffer = {from: function(){}}; Buffer.from()"
        }],
        invalid: getInvalidsForNoUnsupportedNodeBuiltsRule()
    }
);