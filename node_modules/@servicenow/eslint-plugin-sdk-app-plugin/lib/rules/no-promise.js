const PROMISE_STATIC_METHODS = {
    all: true,
    allSettled: true,
    any: true,
    race: true,
    reject: true,
    resolve: true,
    withResolvers: true,
}

module.exports = {
    meta: {
        docs: {
            description: 'disallow the `Promise` class.',
            category: 'ES2015',
            recommended: false
        },
        fixable: null,
        messages: {
            forbidden: 'ES2015 Promise class is not supported in now platform.'
        },
        schema:[],
        type:'problem',
    },
    create(context) {
        return {
            CallExpression(node) {
                if(node.callee.type === 'MemberExpression' && 
                    node.callee.object.name === 'Promise' &&
                    node.callee.object.type === 'Identifier' &&
                    PROMISE_STATIC_METHODS[node.callee.property.name]) {
                    context.report({context,node, messageId:'forbidden'})
                }
            },

            NewExpression(node) {
                if(node.callee.name === 'Promise') {
                    context.report({context,node, messageId:'forbidden'})
                }
            }
        }
    }
}