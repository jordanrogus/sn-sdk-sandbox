import { TimeZone } from '../imports/TimeZone';
import { User } from '../imports/User';
import { EncryptionContext } from '../imports/EncryptionContext';
import { ChoiceList } from '../imports/ChoiceList';
import { HttpSession } from '../imports/HttpSession';
import { GlideRecord } from '../imports/GlideRecord';
import { ScopedKMFKaaProfile } from '../imports/ScopedKMFKaaProfile';
import { GlideStack } from '../imports/GlideStack';
import { CryptoModulePicker } from '../imports/CryptoModulePicker';
import { IPAddress } from '../imports/IPAddress';
import { Stack } from '../imports/Stack';
export declare class GlideSession {
    addErrorMessage(message?: string): void;
    addInfoMessage(message?: string): void;
    addTrivialMessage(message?: string): void;
    checkActiveDBs(): void;
    clearClientData(name?: string): void;
    clearProperty(key?: string): void;
    clearWatchField(): void;
    constructor();
    disableQueryCategoryPool(poolName?: string): void;
    static disableSeparation(): void;
    static disconnect(): void;
    static disconnect(releaseMutexes?: boolean): void;
    static enableSeparation(): void;
    static get(): GlideSession;
    getActivatedElevatedRoles(): string;
    getAvailableElevatedRoles(): string;
    getBooleanProperty(name?: string): boolean;
    getBooleanProperty(key?: string, bDefault?: boolean): boolean;
    getBusinessRuleStack(): Stack;
    getClientData(name?: string): string;
    getClientDataMap(): ChoiceList;
    getClientIP(): IPAddress;
    getContextualMode(): string;
    getCryptoModulePicker(): CryptoModulePicker;
    getCryptoModulePickerForTableWithSingleModule(tableName?: string): CryptoModulePicker;
    getCurrentDomainID(): string;
    getDateFormat(): string;
    getDateFormat(style?: string): string;
    getDateTimeFormat(): string;
    getDateTimeFormat(dateStyle?: string): string;
    getEncryptionContext(): EncryptionContext;
    getFullName(): string;
    getHttpSession(): HttpSession;
    getIntProperty(key?: string): number;
    getIntProperty(key?: string, iDefault?: number): number;
    getKaaProfile(): ScopedKMFKaaProfile;
    getLanguage(): string;
    getLoginHome(direct?: boolean): string;
    getNumberOfWaiters(): number;
    getProperty(key?: string): any;
    getRoles(): string;
    getRoles(includeDefaultRoles?: boolean): string;
    getRunEngines(): boolean;
    static getSeparationValue(): string;
    getSessionID(): string;
    getSessionKey(): string;
    getStack(): GlideStack;
    getStack(stackName?: string): GlideStack;
    getStackName(): string;
    getTimeFormat(): string;
    getTimeZone(): TimeZone;
    getTimeZoneName(): string;
    getTimeZoneShortName(): string;
    getUID(): string;
    getURI(): string;
    getUser(): User;
    getUserName(): string;
    getWatchField(): string;
    getWorkflow(): boolean;
    hasRole(appRoles?: string): boolean;
    impersonate(userSysId?: string): string;
    isInteractive(): boolean;
    isLockedOut(): boolean;
    isLoggedIn(): boolean;
    isOverridingQueryRoute(poolGR?: GlideRecord): boolean;
    isQueryCategoryPoolDisabled(poolName?: string): boolean;
    loadUserByID(userSysId?: string): User;
    onlineImpersonate(userSysId?: string): string;
    onlineUnimpersonate(): string;
    putClientData(name?: string, value?: string): void;
    putProperty(key?: string, value?: any): void;
    resetDisabledQueryCategoryPool(poolName?: string): void;
    resetOverrideQueryCategoryPool(): void;
    resetURI(): string;
    setCacheFlush(onOrOff?: boolean): boolean;
    setCacheIgnoreFlushTable(table?: string): string;
    setContextualMode(mode?: string): void;
    setDateFormat(dateFormat?: string): void;
    setDomainID(domainID?: string): void;
    setInteractive(b?: boolean): void;
    setLanguage(language?: string): void;
    setOverrideQueryCategoryPool(poolGR?: GlideRecord): void;
    setRunEngines(onOrOff?: boolean): boolean;
    setStrictQuery(b?: boolean): boolean;
    setTimeFormat(timeFormat?: string): void;
    setTimeZoneName(timezoneName?: string): void;
    setURI(uri?: string): void;
    setWatchField(id?: string): void;
    setWorkflow(onOrOff?: boolean): boolean;
}
