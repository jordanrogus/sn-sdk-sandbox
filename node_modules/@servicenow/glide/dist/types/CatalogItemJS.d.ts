import { Context } from '../imports/Context';
import { Function } from '../imports/Function';
import { ScriptableObject } from '../imports/ScriptableObject';
export declare class CatalogItemJS {
    availableForUserCriteria(action?: string, criteriaIDs?: Array<any>): void;
    canView(isMobile?: boolean, userId?: string): boolean;
    canViewInDomain(): boolean;
    canViewOnSearch(isMobile?: boolean): boolean;
    constructor(cx?: Context, args?: any[], ctorObj?: Function, inNewExpr?: boolean);
    create(standardUpdate?: boolean): string;
    static deleteCatalogItemAndReferences(id?: string): boolean;
    deleteRecord(standardUpdate?: boolean): void;
    getAvailability(): string;
    getCatalogs(): string;
    getCategories(catalogSysId?: string): Array<any>;
    getCategoryTree(categoryId?: string): Record<any, any>;
    getCompleteItemPrice(): string;
    getDataLookUps(): Array<any>;
    getFirstAccessibleCategoryForSearch(catalogId?: string): string;
    getIcon(): string;
    getInvalidDelegatedUsers(requestForUsers?: Array<any>): Array<any>;
    getItemForVA(): Record<any, any>;
    getItemSummary(isPortal?: boolean, options?: string): Record<any, any>;
    getMRVSIds(): Array<any>;
    getMobilePicture(): string;
    getPicture(): string;
    getRecordClass(): string;
    getSequencingProcess(): string;
    getTemplateUsed(): string;
    getUIPolicies(unfiltered?: boolean): Array<any>;
    getVariableKeys(mode?: number): Array<any>;
    getVariableSet(): Array<any>;
    getVariables(layout?: boolean, isFlat?: boolean, includeContainers?: boolean): Array<any>;
    getVariablesDynamicValueConfig(): Array<any>;
    getVariablesLayout(includeBreakVariables?: boolean): Array<any>;
    hasRequestedForVariable(isGuideItem?: boolean): boolean;
    hasTemplateManagerRole(): boolean;
    isActive(): boolean;
    isAssociatedWithCatalog(catalogId?: string): boolean;
    isDelegationAllowed(requestedForUser?: string): boolean;
    isOwner(userId?: string): boolean;
    isVisibleServicePortal(): boolean;
    notAvailableForUserCriteria(action?: string, criteriaIDs?: Array<any>): void;
    read(columns?: Record<any, any>, standardUpdate?: boolean): Record<any, any>;
    setAttributes(attributes?: Record<any, any>): void;
    setCatalogs(catalogs?: string): void;
    setCategories(categories?: string): void;
    setImage(dbImageSysId?: string, type?: string): void;
    setTableName(tableName?: string): void;
    submitProducer(o?: ScriptableObject): Record<any, any>;
    update(columnValues?: Record<any, any>, standardUpdate?: boolean): void;
}
