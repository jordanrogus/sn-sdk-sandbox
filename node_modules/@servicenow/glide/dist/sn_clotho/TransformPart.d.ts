import { Context } from '../imports/Context';
import { NativeObject } from '../imports/NativeObject';
import { Function } from '../imports/Function';
import { ScopedTransformResult } from '../imports/ScopedTransformResult';
import { ScopedTransformPart } from '../imports/ScopedTransformPart';
import { Number } from '../imports/Number';
export declare class TransformPart {
    add(summand?: Number): ScopedTransformPart;
    autocorrelate(): ScopedTransformPart;
    avg(): ScopedTransformPart;
    bottom(count?: Number): ScopedTransformPart;
    ceil(precision?: Number): ScopedTransformPart;
    collect(): ScopedTransformPart;
    constructor(cx?: Context, args?: any[], ctorObj?: Function, inNewExpr?: boolean);
    copyData(obj1?: any, obj2?: any): ScopedTransformPart;
    count(): ScopedTransformPart;
    decompose(_tags?: any): ScopedTransformPart;
    derivative(): ScopedTransformPart;
    deviation(predictedValues?: any, method?: string): ScopedTransformPart;
    div(divisor?: Number): ScopedTransformPart;
    filter(_aggregator?: any, _window?: any): ScopedTransformPart;
    fit(_params?: NativeObject): ScopedTransformPart;
    floor(precision?: Number): ScopedTransformPart;
    fractiles(_fractions?: any): ScopedTransformPart;
    getResult(): ScopedTransformResult;
    groupBy(field?: string): ScopedTransformPart;
    interpolate(countOrDuration?: any): ScopedTransformPart;
    iqr(): ScopedTransformPart;
    label(label?: string): ScopedTransformPart;
    limit(countOrDuration?: any): ScopedTransformPart;
    log(base?: Number): ScopedTransformPart;
    max(): ScopedTransformPart;
    median(): ScopedTransformPart;
    metric(metricName?: string): ScopedTransformPart;
    min(): ScopedTransformPart;
    mul(factor?: any): ScopedTransformPart;
    partition(_aggregator?: string, _window?: any, _base?: any): ScopedTransformPart;
    predict(obj1?: any, obj2?: any): ScopedTransformPart;
    put(): void;
    resample(a1?: any, a2?: any, a3?: any): ScopedTransformPart;
    round(precision?: Number): ScopedTransformPart;
    stddev(): ScopedTransformPart;
    sub(substrahend?: any): ScopedTransformPart;
    sum(): ScopedTransformPart;
    top(count?: Number): ScopedTransformPart;
    where(obj?: any): ScopedTransformPart;
}
