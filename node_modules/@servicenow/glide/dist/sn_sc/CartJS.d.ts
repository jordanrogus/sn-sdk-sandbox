import { Context } from '../imports/Context';
import { Function } from '../imports/Function';
import { ScriptableObject } from '../imports/ScriptableObject';
import { JSONObject } from '../imports/JSONObject';
import { GlideRecord } from '../imports/GlideRecord';
import { ScopedGlideRecord } from '../imports/ScopedGlideRecord';
import { Scriptable } from '../imports/Scriptable';
export declare class CartJS {
    activateGuide(): void;
    addItemToCart(request?: ScriptableObject): JSONObject;
    addToCart(request?: ScriptableObject): JSONObject;
    calculateLocation(userSysId?: string): string;
    canEmptyCart(cartID?: string): boolean;
    static canViewRF(): boolean;
    checkAllItemsHaveRequestedFor(): boolean;
    static checkSequence(request?: ScriptableObject, i?: number): string;
    checkoutCart(isMobileOrPortal?: boolean): JSONObject;
    checkoutGuide(): JSONObject;
    checkoutSummary(noFrequency?: boolean): JSONObject;
    cleanupCart(): void;
    constructor(cx?: Context, args?: any[], ctorObj?: Function, inNewExpr?: boolean);
    static copyRPVariables(src?: GlideRecord, destination?: GlideRecord): boolean;
    empty(cartID?: string): void;
    findConflictingDomain(): string;
    findUserCriteriaRestrictedItems(): string[];
    generateLocation(gr?: GlideRecord): string;
    getCart(): void;
    getCartDetails(includeItemDetails?: boolean): JSONObject;
    getCartID(): string;
    getCartItemDetails(cartItemId?: string): JSONObject;
    getCartItems(): ScopedGlideRecord;
    getCrumbHistory(): Array<any>;
    getCrumbs(): Array<any>;
    getDeliveryAddress(): string;
    getGlideRecord(): ScopedGlideRecord;
    getGuide(): string;
    getGuideActive(): string;
    getItemOptionNew(questionID?: string, cartItemID?: string): ScopedGlideRecord;
    getRequestedFor(): string;
    static getRequestedForAddress(userID?: string): string;
    getRequestedForDisplayName(): string;
    getRequestedForLocation(): string;
    getRequestedForLocationDisplayName(): string;
    getSpecialInstructions(): string;
    isDuplicateAnswer(questionID?: string, cartItemID?: string): boolean;
    isEmpty(): boolean;
    static isSameVersion(cartItem?: string, catItem?: string): boolean;
    static moveRPVariables(src?: GlideRecord, destination?: GlideRecord): boolean;
    newGuide(): void;
    orderNow(request?: ScriptableObject): JSONObject;
    processLocationChange(current?: GlideRecord): void;
    processUserChange(userGR?: GlideRecord): void;
    remove(id?: string): void;
    setDeliveryAddress(deliveryAddress?: string): void;
    setEngagementChannel(engagementChannel?: string): void;
    setGuide(guide?: string): void;
    setGuideActive(guideActive?: string): void;
    setParentParams(params?: Record<any, any>): void;
    setReferrer(referrer?: string): void;
    setRequestedFor(user?: string): void;
    static setSource(cx?: Context, thisObj?: Scriptable, args?: any[], funObj?: Function): void;
    setSpecialInstructions(specialInstructions?: string): void;
    submitOrder(request?: ScriptableObject): JSONObject;
    update(): void;
    updateCart(request?: ScriptableObject, cartItem?: string, noFrequency?: boolean): JSONObject;
    updateItem(o?: ScriptableObject, itemId?: string): JSONObject;
    validateCartItems(): string;
}
