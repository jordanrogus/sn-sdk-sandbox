import { NativeArray } from '../imports/NativeArray';
import { NativeObject } from '../imports/NativeObject';
import { SPScriptObject } from '../imports/SPScriptObject';
import { SPScriptArray } from '../imports/SPScriptArray';
import { JSONObject } from '../imports/JSONObject';
import { GlideRecord } from '../imports/GlideRecord';
import { JSONArray } from '../imports/JSONArray';
import { GlideElement } from '../imports/GlideElement';
import { Scriptable } from '../imports/Scriptable';
export declare class GlideSPScriptable {
    addQueryString(gr?: GlideRecord, queryString?: string): GlideRecord;
    buildThemeVariableModel(portalId?: string, names?: string): Scriptable;
    canReadRecord(gr?: GlideRecord): boolean;
    canReadRecord(table?: string, id?: string): boolean;
    static canSeePage(pageID?: string): boolean;
    constructor();
    constructor(portalID?: string);
    getAISearchResultsActionConfig(searchConfigContextId?: string, portalId?: string): string;
    getAllKBRecords(kbIDs?: string): GlideRecord;
    getAllowedItems(): Scriptable;
    getAnnouncementConsumerType(typeIds?: Array<any>): Record<any, any>;
    getAssessmentRecord(assessmentId?: string, typeId?: string, data?: Scriptable): Scriptable;
    getCatalogItem(data?: Scriptable): Scriptable;
    getCatalogItem(itemID?: string): Scriptable;
    getCatalogItem(itemID?: string, isOrdering?: boolean): Scriptable;
    getCatalogItem(itemID?: string, isOrdering?: boolean, tableName?: string): Scriptable;
    getCatalogs(): Scriptable;
    getDisplayValue(name?: string): string;
    getField(gr?: GlideRecord, name?: string): Scriptable;
    getFields(gr?: GlideRecord, names?: string): Scriptable;
    getFieldsObject(gr?: GlideRecord, names?: string): Scriptable;
    getFilterBreadcrumbs(table?: string, query?: string, fixedQuery?: string): SPScriptArray;
    getForm(table?: string, sys_id?: string): Scriptable;
    getForm(table?: string, sys_id?: string, encodedQuery?: string): Scriptable;
    getForm(table?: string, sys_id?: string, encodedQuery?: string, view?: string): Scriptable;
    getForm(table?: string, sys_id?: string, encodedQuery?: string, view?: string, isPopup?: boolean): Scriptable;
    getForm(table?: string, sys_id?: string, encodedQuery?: string, view?: string, isPopup?: boolean, includeScripts?: boolean): Scriptable;
    getGuide(itemID?: string, isOrdering?: boolean, addIncludedItems?: boolean): Scriptable;
    getHTTPS(httpsURL?: string): Scriptable;
    getInstanceRecord(): GlideRecord;
    getItemDisplayPrice(itemID?: string, tableName?: string, quantity?: number): Scriptable;
    getKBCategoryArticleSummaries(category?: string, limit?: number, maxChars?: number): Scriptable;
    getKBCategoryArticleSummary(category?: string, limit?: number, maxChars?: number): Scriptable;
    getKBCategoryArticles(category?: string): Scriptable;
    getKBCategoryArticles(category?: string, limit?: number): Scriptable;
    getKBCount(kbIDs?: string): number;
    getKBRecord(): GlideRecord;
    getKBSiblingCategories(catID?: string): GlideRecord;
    getKBTopCategoryID(catId?: string): string;
    getKnowledgeBases(): string;
    getListColumns(tableName?: string): Scriptable;
    getListColumns(tableName?: string, view?: string): Scriptable;
    getMenuHREF(gr?: GlideRecord): Scriptable;
    getMenuItems(sys_id?: string): Scriptable;
    getPageRecord(pageID?: string, pageSysId?: string): GlideRecord;
    getParameter(name?: string): any;
    getPortalRecord(): GlideRecord;
    getRecord(): GlideRecord;
    getRecord(table?: string, ge?: GlideElement): GlideRecord;
    getRecord(table?: string, sys_id?: string): GlideRecord;
    getRecordDisplayValues(data?: Scriptable, from?: GlideRecord, names?: string): void;
    getRecordElements(from?: GlideRecord, names?: string): SPScriptObject;
    getRecordElements(data?: Scriptable, from?: GlideRecord, names?: string): void;
    getRecordValues(data?: Scriptable, from?: GlideRecord, names?: string): void;
    getRecordVariables(gr?: GlideRecord): string;
    getRecordVariables(gr?: GlideRecord, includeNilResponses?: boolean): string;
    getRecordVariablesArray(gr?: GlideRecord): Scriptable;
    getRecordVariablesArray(gr?: GlideRecord, includeNilResponses?: boolean): Scriptable;
    getRectangleRecord(): GlideRecord;
    getRelatedList(tableName?: string, foreignKey?: string): NativeArray;
    getSCRecord(): GlideRecord;
    getSPVlistActions(sysId?: string): JSONArray;
    getSearchSources(portalID?: string): NativeArray;
    getSearchSources(portalID?: string, commaSeparatedSourceIDs?: string): NativeArray;
    getStream(): Scriptable;
    getStream(table?: string, sys_id?: string): Scriptable;
    getStreamEntries(): string;
    getSubCategories(catId?: string): GlideRecord;
    getTableVariableRow(data?: NativeObject): Scriptable;
    getTaxonomies(): string;
    getUserInitials(): string;
    getUserTrackingDetails(): JSONObject;
    getValue(name?: string): any;
    getValues(data?: Scriptable): void;
    getValues(data?: Scriptable, names?: string): void;
    getVariables(): string;
    getVariables(includeNilResponses?: boolean): string;
    getVariablesArray(): Scriptable;
    getVariablesArray(includeNilResponses?: boolean): Scriptable;
    getWidget(widgetID?: string): Scriptable;
    getWidget(widgetID?: string, widgetParams?: any): Scriptable;
    getWidgetFromInstance(instanceID?: string): Scriptable;
    getWidgetFromRectangle(instanceID?: string): Scriptable;
    getWidgetParameters(): Scriptable;
    getWidgetScope(instanceID?: string): Scriptable;
    hasTextIndex(tableName?: string): boolean;
    isAISearchEnabled(): boolean;
    isDarkThemeEnabledInPortal(): boolean;
    isRTLEnabled(): boolean;
    isServicePortalURL(inputURL?: string): boolean;
    isUserCriteriaEnabled(): boolean;
    log(message?: any): void;
    static logSearch(table?: string, terms?: string, count?: number): void;
    static logSearch(table?: string, terms?: string, count?: number, searchType?: string): void;
    static logSearch(table?: string, terms?: string, count?: number, searchType?: string, portal?: string, page?: string): void;
    static logStat(type?: string, table?: string, id?: string): void;
    static logStat(type?: string, table?: string, id?: string, text?: string): void;
    static logStat(type?: string, table?: string, id?: string, text?: string, portalId?: string): void;
    mapUrlToSPUrl(url?: string): string;
    portalHasChatConfig(portalId?: string): boolean;
    publishSearchAnalytics(payloadString?: string): void;
    saveRecord(table?: string, sys_id?: string, model?: Scriptable): Scriptable;
    saveVariables(table?: string, sys_id?: string, model?: Scriptable): Scriptable;
    showCatalogPrices(): boolean;
    showPrice(price?: number): boolean;
    showRecurringPrice(price?: number, freq?: string): boolean;
    stripHTML(html?: string): Scriptable;
    translateTemplate(input?: string): string;
    userCanSeeSearchSourceByCriteria(searchSourceID?: string): boolean;
}
