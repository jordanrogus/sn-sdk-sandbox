import { GlideMemoryRecord } from '../imports/GlideMemoryRecord';
import { User } from '../imports/User';
import { GlideRecord } from '../imports/GlideRecord';
import { GlideVector } from '../imports/GlideVector';
export declare class GlideUser {
    static authenticate(user?: string, password?: string): boolean;
    static authenticateMutualAuthToken(): string;
    static authenticateOAuthAccessToken(token?: string): string;
    static authenticateUser(user?: string, password?: string): string;
    exists(): boolean;
    static getAllGroups(): Array<string>;
    getAvatar(): string;
    getBusinessNumber(): string;
    getCompanyID(): string;
    getCompanyRecord(): GlideRecord;
    getCountry(): string;
    static getCurrentUser(): User;
    getDateFormat(): string;
    getDateFormatEx(style?: string): string;
    getDateTimeFormat(): string;
    getDepartmentID(): string;
    getDisplayName(): string;
    getDomainDisplayValue(): string;
    getDomainID(): string;
    getEmail(): string;
    getFirstName(): string;
    getFullName(): string;
    getID(): string;
    getInitials(): string;
    getLanguage(): string;
    getLastName(): string;
    getLocation(): string;
    getManagedGroups(): Array<string>;
    getManagerID(): string;
    getManagerName(): string;
    getMobileNumber(): string;
    getMyExplicitGroups(): Array<string>;
    static getMyExplicitGroups(u?: string): Array<string>;
    getMyGroups(): Array<string>;
    static getMyGroups(user?: string): Array<string>;
    getMyGroupsExcludeAdmin(): Array<string>;
    getName(): string;
    getPreference(name?: string): string;
    getRecord(): GlideMemoryRecord;
    getRoles(): GlideVector;
    static getSysId(name?: string, value?: string): string;
    static getSysIdByEmail(email?: string): string;
    static getSysTimeZone(): string;
    getTZ(): string;
    getTimeFormat(): string;
    getTitle(): string;
    static getUser(user?: string): User;
    static getUserByEmail(email?: string): User;
    static getUserByID(id?: string): User;
    getUserRoles(): GlideVector;
    getUserType(): string;
    hasRole(o?: any): boolean;
    hasRoles(): boolean;
    isACRUser(): boolean;
    isDefault(): boolean;
    isExplicitMemberOf(group?: any): boolean;
    isLockedOut(): boolean;
    static isLockedOut(userName?: string): boolean;
    isMemberOf(group?: any): boolean;
    isOpenIDConnect(): boolean;
    isReadOnlyUser(): boolean;
    isTimeLimitedCredential(): boolean;
    static isWebSvcAccessOnly(userName?: string): boolean;
    isXML(): boolean;
    static resolveNameFromLoginName(name?: any): string;
    static resolveNameFromLoginName(name?: string): string;
    static resolveNameFromSysID(sysID?: string): string;
    static resolveSysId(value?: string): string;
    savePreference(name?: string, value?: string): void;
    savePreferences(): void;
    setDateFormat(df?: string): void;
    setDomainID(id?: string): void;
    setPreference(name?: string, value?: string): void;
    setPreferencesLoaded(b?: boolean): void;
    setTimeFormat(tf?: string): void;
    constructor();
}
