import { GlideTime } from '../imports/GlideTime';
import { TimeZone } from '../imports/TimeZone';
import { Counter } from '../imports/Counter';
import { Calendar } from '../imports/Calendar';
import { GlideDuration } from '../imports/GlideDuration';
import { GlideDate } from '../imports/GlideDate';
export declare class GlideDateTime {
    add(gd?: GlideTime): void;
    add(value?: number): void;
    addDays(amount?: number): void;
    addDaysLocalTime(amount?: number): void;
    addDaysUTC(amount?: number): void;
    addMonths(amount?: number): void;
    addMonthsLocalTime(amount?: number): void;
    addMonthsUTC(amount?: number): void;
    addSeconds(value?: number): void;
    addWeeks(amount?: number): void;
    addWeeksLocalTime(amount?: number): void;
    addWeeksUTC(amount?: number): void;
    addYears(amount?: number): void;
    addYearsLocalTime(amount?: number): void;
    addYearsUTC(amount?: number): void;
    after(gdt?: GlideDateTime): boolean;
    before(gdt?: GlideDateTime): boolean;
    compareTo(o?: any): number;
    constructor();
    constructor(date?: Date);
    constructor(g?: GlideDateTime);
    constructor(value?: string);
    equals(o?: any): boolean;
    static excludeZFromFormat(format?: string): string;
    getCalendarInTimeZone(timeZone?: string): Calendar;
    getCounter(): Counter;
    getDSTOffset(): number;
    getDate(): GlideDate;
    getDayOfMonth(): number;
    getDayOfMonthLocalTime(): number;
    getDayOfMonthUTC(): number;
    getDayOfWeek(): number;
    getDayOfWeekLocalTime(): number;
    getDayOfWeekUTC(): number;
    getDaysInMonth(): number;
    getDaysInMonthLocalTime(): number;
    getDaysInMonthUTC(): number;
    getDisplayValue(): string;
    getDisplayValueInternal(): string;
    getDisplayValueLang(style?: string): string;
    getDisplayValueLang(style?: string, language?: string): string;
    getDisplayValueWithoutTZ(): string;
    getErrorMsg(): string;
    getInternalFormattedLocalTime(): string;
    getInternalMidnight(iday?: number): GlideDateTime;
    getLocalDate(): GlideDate;
    getLocalTime(): GlideTime;
    getMonth(): number;
    getMonthLocalTime(): number;
    getMonthUTC(): number;
    getNumericValue(): number;
    getRaw(): Date;
    getSpanTime(dayofweek?: number): GlideTime;
    getTZOffset(): number;
    getTime(): GlideTime;
    getUTCMidnight(dayofweek?: number): GlideDateTime;
    getUTCValue(): string;
    getUserFormattedLocalTime(): string;
    getUserTimeZone(): TimeZone;
    getValue(): string;
    getWeekOfYearLocalTime(): number;
    getWeekOfYearUTC(): number;
    getXMLValue(): string;
    getYear(): number;
    getYearLocalTime(): number;
    getYearUTC(): number;
    hasDate(): boolean;
    hashCode(): number;
    isDST(): boolean;
    isValid(): boolean;
    onOrAfter(gdt?: GlideDateTime): boolean;
    onOrBefore(gdt?: GlideDateTime): boolean;
    setDayOfMonth(day?: number): void;
    setDayOfMonthLocalTime(day?: number): void;
    setDayOfMonthUTC(day?: number): void;
    setDebugTZ(debugTZ?: TimeZone): void;
    setDisplayValue(asDisplayed?: string): void;
    setDisplayValue(value?: string, format?: string): void;
    setDisplayValueInternal(value?: string): void;
    setDisplayValueInternalWithAlternates(value?: string): void;
    setDisplayValueLang(asDisplayed?: string, style?: string): void;
    setDisplayValueLang(asDisplayed?: string, style?: string, language?: string): void;
    setGlideDateTime(g?: GlideDateTime): void;
    setInitialValue(value?: string): void;
    setMonth(month?: number): void;
    setMonthLocalTime(month?: number): void;
    setMonthUTC(month?: number): void;
    setNumericValue(l?: number): void;
    setTZ(tz?: TimeZone): void;
    setTimeZone(timeZoneAsString?: string): boolean;
    setValue(o?: any): void;
    setValue(number?: number): void;
    setValueUTC(dt?: string, format?: string): void;
    setXMLValue(xml?: string): void;
    setYear(year?: number): void;
    setYearLocalTime(year?: number): void;
    setYearUTC(year?: number): void;
    subtract(gd?: GlideTime): void;
    subtract(value?: number): void;
    subtract(value?: number): void;
    static subtract(start?: GlideDateTime, end?: GlideDateTime): GlideDuration;
    toString(): string;
}
