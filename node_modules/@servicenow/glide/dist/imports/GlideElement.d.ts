import { SysStyleResult } from '../imports/SysStyleResult';
import { AGlideObject } from '../imports/AGlideObject';
import { GlideRecord } from '../imports/GlideRecord';
import { MappingLookupSourceDescriptor } from '../imports/MappingLookupSourceDescriptor';
import { ElementDescriptor } from '../imports/ElementDescriptor';
export declare class GlideElement {
    canCreate(): boolean;
    canRead(): boolean;
    canWrite(): boolean;
    changes(): boolean;
    changesFrom(o?: any): boolean;
    changesFromNotEmpty(): boolean;
    changesTo(o?: any): boolean;
    changesToNotEmpty(): boolean;
    constructor();
    debug(msg?: any): void;
    elementSupportsMapping(): boolean;
    explainLock(): string;
    getAttribute(attribute?: string): string;
    getBaseTableName(): string;
    getBooleanAttribute(attribute?: string): boolean;
    getChoiceValue(): string;
    getChoiceValueLang(language?: string): string;
    getChoices(dependent?: string): Array<any>;
    getContextID(): string;
    getContextName(): string;
    getDebugCount(): number;
    getDecryptedValue(): string;
    getDependent(): string;
    getDependentTable(): string;
    getDisplayValue(maxCharacters?: number): string;
    getDisplayValueExt(maxCharacters?: number, nullsub?: string): string;
    getDisplayValueLang(language?: string): string;
    getED(): ElementDescriptor;
    getElementValue(name?: string): string;
    getError(): string;
    getEscapedValue(): string;
    getFieldStyle(): string;
    getFullStyle(): SysStyleResult;
    getGlideObject(): AGlideObject;
    getGlideRecord(): GlideRecord;
    getHTMLValue(maxChars?: number): string;
    getHTMLValueExt(maxCharacters?: number, nullsub?: string): string;
    getHint(): string;
    getInitialValue(): string;
    getLabel(): string;
    getLabelLang(language?: string): string;
    getMappingConfig(): MappingLookupSourceDescriptor;
    getModifiedBy(): string;
    getName(): string;
    getReferenceKey(): string;
    getStyle(): string;
    getTableName(): string;
    getTextAreaDisplayValue(): string;
    getValue(): string;
    getValueMapping(): string;
    getXHTMLValue(): string;
    getXMLValue(): string;
    hasAttribute(attribute?: string): boolean;
    hasMapping(): boolean;
    hasRightsTo(operation?: string): boolean;
    hasValue(): boolean;
    isArray(): boolean;
    isDynamicCreate(): boolean;
    isNil(): boolean;
    isObject(): boolean;
    nil(): boolean;
    setDisplayValue(value?: any): void;
    setError(error?: string): void;
    setInitialValue(value?: string): void;
    setJournalEntry(value?: any, userName?: string): void;
    setValue(value?: any): void;
    setValueMapping(mapping?: string): void;
    size(): number;
    toString(): string;
}
