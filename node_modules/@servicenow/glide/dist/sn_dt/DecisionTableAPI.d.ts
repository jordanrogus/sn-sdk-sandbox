import { NativeArray } from '../imports/NativeArray';
import { ScriptableObject } from '../imports/ScriptableObject';
import { GlideRecord } from '../imports/GlideRecord';
export declare class DecisionTableAPI {
    createAnswerElementChoices(decisionId?: string, choices?: Array<any>): Record<any, any>;
    createAnswerElements(decisionId?: string, answerElements?: Array<any>): Record<any, any>;
    createConditions(decisionId?: string, conditions?: Array<any>): Record<any, any>;
    createDecisionTable(decisionTable?: Record<any, any>): Record<any, any>;
    createInputChoices(decisionId?: string, choices?: Array<any>): Record<any, any>;
    createInputs(decisionId?: string, inputs?: Array<any>): Record<any, any>;
    createQuestions(decisionId?: string, questions?: Array<any>): Record<any, any>;
    deleteAnswerElement(answerElementId?: string): Record<any, any>;
    deleteChoice(choiceId?: string): Record<any, any>;
    deleteCondition(conditionId?: string): Record<any, any>;
    deleteDecisionTable(decisionId?: string): Record<any, any>;
    deleteInput(inputId?: string): Record<any, any>;
    deleteQuestion(decisionId?: string): Record<any, any>;
    deleteStaleMultipleAnswerRecords(): void;
    executeCondition(decisionId?: string, inputs?: Record<any, any>, condition?: string): boolean;
    executeDecisions(decisionId?: string, inputs?: Record<any, any>): Record<any, any>;
    findOrCreateMultipleAnswerRecord(decisionId?: string, answerElementValues?: Record<any, any>): string;
    findOrCreateMultipleAnswerRecords(decisionId?: string, answerElementValuesMap?: Record<any, any>): Record<any, any>;
    getAll(): ScriptableObject;
    getAllAsJSON(): string;
    getAnswerElements(decisionId?: string): ScriptableObject;
    getAnswers(decisionId?: string): ScriptableObject;
    getAnswersAsJSON(decisionId?: string): string;
    getDecision(decisionId?: string, inputs?: Record<any, any>): GlideRecord;
    getDecisionTable(decisionId?: string): ScriptableObject;
    getDecisionTableAsJSON(decisionId?: string): string;
    getDecisions(decisionId?: string, inputs?: Record<any, any>): NativeArray;
    getInputs(decisionId?: string): ScriptableObject;
    getInputsAsJSON(decisionId?: string): string;
    getQuestions(decisionId?: string): ScriptableObject;
    getQuestionsAsJSON(decisionId?: string): string;
    updateAnswerElement(answerElementId?: string, answerElement?: Record<any, any>): Record<any, any>;
    updateChoice(choiceId?: string, choice?: Record<any, any>): Record<any, any>;
    updateCondition(conditionId?: string, updates?: Record<any, any>): Record<any, any>;
    updateDecisionTable(decisionId?: string, decisionTable?: Record<any, any>): Record<any, any>;
    updateInput(inputId?: string, updates?: Record<any, any>): Record<any, any>;
    updateQuestion(decisionId?: string, question?: Record<any, any>): Record<any, any>;
    constructor();
}
